// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: rpc/Abnormal.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AbnormalDetectionClient is the client API for AbnormalDetection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AbnormalDetectionClient interface {
	Abnormal(ctx context.Context, in *AbnormalRequest, opts ...grpc.CallOption) (AbnormalDetection_AbnormalClient, error)
	AbnormalChangeFlag(ctx context.Context, in *AbnormalFlagParam, opts ...grpc.CallOption) (*ChangeFlagResponse, error)
}

type abnormalDetectionClient struct {
	cc grpc.ClientConnInterface
}

func NewAbnormalDetectionClient(cc grpc.ClientConnInterface) AbnormalDetectionClient {
	return &abnormalDetectionClient{cc}
}

func (c *abnormalDetectionClient) Abnormal(ctx context.Context, in *AbnormalRequest, opts ...grpc.CallOption) (AbnormalDetection_AbnormalClient, error) {
	stream, err := c.cc.NewStream(ctx, &AbnormalDetection_ServiceDesc.Streams[0], "/AbnormalDetection/Abnormal", opts...)
	if err != nil {
		return nil, err
	}
	x := &abnormalDetectionAbnormalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AbnormalDetection_AbnormalClient interface {
	Recv() (*AbnormalResponse, error)
	grpc.ClientStream
}

type abnormalDetectionAbnormalClient struct {
	grpc.ClientStream
}

func (x *abnormalDetectionAbnormalClient) Recv() (*AbnormalResponse, error) {
	m := new(AbnormalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *abnormalDetectionClient) AbnormalChangeFlag(ctx context.Context, in *AbnormalFlagParam, opts ...grpc.CallOption) (*ChangeFlagResponse, error) {
	out := new(ChangeFlagResponse)
	err := c.cc.Invoke(ctx, "/AbnormalDetection/AbnormalChangeFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AbnormalDetectionServer is the server API for AbnormalDetection service.
// All implementations must embed UnimplementedAbnormalDetectionServer
// for forward compatibility
type AbnormalDetectionServer interface {
	Abnormal(*AbnormalRequest, AbnormalDetection_AbnormalServer) error
	AbnormalChangeFlag(context.Context, *AbnormalFlagParam) (*ChangeFlagResponse, error)
	mustEmbedUnimplementedAbnormalDetectionServer()
}

// UnimplementedAbnormalDetectionServer must be embedded to have forward compatible implementations.
type UnimplementedAbnormalDetectionServer struct {
}

func (UnimplementedAbnormalDetectionServer) Abnormal(*AbnormalRequest, AbnormalDetection_AbnormalServer) error {
	return status.Errorf(codes.Unimplemented, "method Abnormal not implemented")
}
func (UnimplementedAbnormalDetectionServer) AbnormalChangeFlag(context.Context, *AbnormalFlagParam) (*ChangeFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbnormalChangeFlag not implemented")
}
func (UnimplementedAbnormalDetectionServer) mustEmbedUnimplementedAbnormalDetectionServer() {}

// UnsafeAbnormalDetectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AbnormalDetectionServer will
// result in compilation errors.
type UnsafeAbnormalDetectionServer interface {
	mustEmbedUnimplementedAbnormalDetectionServer()
}

func RegisterAbnormalDetectionServer(s grpc.ServiceRegistrar, srv AbnormalDetectionServer) {
	s.RegisterService(&AbnormalDetection_ServiceDesc, srv)
}

func _AbnormalDetection_Abnormal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AbnormalRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AbnormalDetectionServer).Abnormal(m, &abnormalDetectionAbnormalServer{stream})
}

type AbnormalDetection_AbnormalServer interface {
	Send(*AbnormalResponse) error
	grpc.ServerStream
}

type abnormalDetectionAbnormalServer struct {
	grpc.ServerStream
}

func (x *abnormalDetectionAbnormalServer) Send(m *AbnormalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AbnormalDetection_AbnormalChangeFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbnormalFlagParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbnormalDetectionServer).AbnormalChangeFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AbnormalDetection/AbnormalChangeFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbnormalDetectionServer).AbnormalChangeFlag(ctx, req.(*AbnormalFlagParam))
	}
	return interceptor(ctx, in, info, handler)
}

// AbnormalDetection_ServiceDesc is the grpc.ServiceDesc for AbnormalDetection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AbnormalDetection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AbnormalDetection",
	HandlerType: (*AbnormalDetectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AbnormalChangeFlag",
			Handler:    _AbnormalDetection_AbnormalChangeFlag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Abnormal",
			Handler:       _AbnormalDetection_Abnormal_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/Abnormal.proto",
}
