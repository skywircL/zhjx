// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: rpc/video.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BacktrackingClient is the client API for Backtracking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BacktrackingClient interface {
	Backtracking(ctx context.Context, in *BacktrackingRequest, opts ...grpc.CallOption) (Backtracking_BacktrackingClient, error)
	BacktrackingChangeFlag(ctx context.Context, in *BacktrackingFlagParam, opts ...grpc.CallOption) (*BacktrackingFlagResponse, error)
}

type backtrackingClient struct {
	cc grpc.ClientConnInterface
}

func NewBacktrackingClient(cc grpc.ClientConnInterface) BacktrackingClient {
	return &backtrackingClient{cc}
}

func (c *backtrackingClient) Backtracking(ctx context.Context, in *BacktrackingRequest, opts ...grpc.CallOption) (Backtracking_BacktrackingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Backtracking_ServiceDesc.Streams[0], "/Backtracking/Backtracking", opts...)
	if err != nil {
		return nil, err
	}
	x := &backtrackingBacktrackingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Backtracking_BacktrackingClient interface {
	Recv() (*BacktrackingResponse, error)
	grpc.ClientStream
}

type backtrackingBacktrackingClient struct {
	grpc.ClientStream
}

func (x *backtrackingBacktrackingClient) Recv() (*BacktrackingResponse, error) {
	m := new(BacktrackingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *backtrackingClient) BacktrackingChangeFlag(ctx context.Context, in *BacktrackingFlagParam, opts ...grpc.CallOption) (*BacktrackingFlagResponse, error) {
	out := new(BacktrackingFlagResponse)
	err := c.cc.Invoke(ctx, "/Backtracking/BacktrackingChangeFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BacktrackingServer is the server API for Backtracking service.
// All implementations must embed UnimplementedBacktrackingServer
// for forward compatibility
type BacktrackingServer interface {
	Backtracking(*BacktrackingRequest, Backtracking_BacktrackingServer) error
	BacktrackingChangeFlag(context.Context, *BacktrackingFlagParam) (*BacktrackingFlagResponse, error)
	mustEmbedUnimplementedBacktrackingServer()
}

// UnimplementedBacktrackingServer must be embedded to have forward compatible implementations.
type UnimplementedBacktrackingServer struct {
}

func (UnimplementedBacktrackingServer) Backtracking(*BacktrackingRequest, Backtracking_BacktrackingServer) error {
	return status.Errorf(codes.Unimplemented, "method Backtracking not implemented")
}
func (UnimplementedBacktrackingServer) BacktrackingChangeFlag(context.Context, *BacktrackingFlagParam) (*BacktrackingFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BacktrackingChangeFlag not implemented")
}
func (UnimplementedBacktrackingServer) mustEmbedUnimplementedBacktrackingServer() {}

// UnsafeBacktrackingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BacktrackingServer will
// result in compilation errors.
type UnsafeBacktrackingServer interface {
	mustEmbedUnimplementedBacktrackingServer()
}

func RegisterBacktrackingServer(s grpc.ServiceRegistrar, srv BacktrackingServer) {
	s.RegisterService(&Backtracking_ServiceDesc, srv)
}

func _Backtracking_Backtracking_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BacktrackingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BacktrackingServer).Backtracking(m, &backtrackingBacktrackingServer{stream})
}

type Backtracking_BacktrackingServer interface {
	Send(*BacktrackingResponse) error
	grpc.ServerStream
}

type backtrackingBacktrackingServer struct {
	grpc.ServerStream
}

func (x *backtrackingBacktrackingServer) Send(m *BacktrackingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Backtracking_BacktrackingChangeFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BacktrackingFlagParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktrackingServer).BacktrackingChangeFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backtracking/BacktrackingChangeFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktrackingServer).BacktrackingChangeFlag(ctx, req.(*BacktrackingFlagParam))
	}
	return interceptor(ctx, in, info, handler)
}

// Backtracking_ServiceDesc is the grpc.ServiceDesc for Backtracking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backtracking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Backtracking",
	HandlerType: (*BacktrackingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BacktrackingChangeFlag",
			Handler:    _Backtracking_BacktrackingChangeFlag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Backtracking",
			Handler:       _Backtracking_Backtracking_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/video.proto",
}
